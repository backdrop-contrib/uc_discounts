<?php
/**
 * @file
 * Install, update, and uninstall functions for uc_discounts module.
 */

/**
 * Implements hook_schema().
 */
function uc_discounts_schema() {
  $schema = array();

  $schema['uc_discounts'] = array(
    'fields' => array(
      'discount_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'short_description' => array(
        'type' => 'varchar',
        'length' => 100,
        'not null' => TRUE,
        'default' => '',
      ),
      'description' => array(
        'type' => 'varchar',
        'length' => 100,
        'not null' => TRUE,
        'default' => '',
      ),
      'qualifying_type' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'qualifying_amount' => array(
        'type' => 'float',
        'not null' => TRUE,
        'default' => 0.0,
        'description' => 'Minimum quantity or price required to qualify for this discount.',
      ),
      'has_qualifying_amount_max' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Whether or not this discount has a max qualifying amount.',
      ),
      'qualifying_amount_max' => array(
        'type' => 'float',
        'not null' => TRUE,
        'default' => 0.0,
        'description' => 'Maximum quantity or price required to qualify for this discount.',
      ),
      'discount_type' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'discount_amount' => array(
        'type' => 'float',
        'not null' => TRUE,
        'default' => 0.0,
        'description' => 'Amount to discount (i.e. 1 free item, 25%, or $2.00)',
      ),
      'requires_code' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
        'description' => 'Requires code to activate discount.',
      ),
      'filter_type' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
        'description' => 'What type of object to filter on.',
      ),
      'has_role_filter' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Whether or not this discount filters based on role.',
      ),
      'use_only_discounted_products_to_qualify' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Calculate the order subtotal using only discounted products.',
      ),
      'requires_single_product_to_qualify' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
        'description' => 'Requires qualifying amount to come from a single product.',
      ),
      'required_product_type' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'max_times_applied' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
        'description' => 'Number of times this discount can be applied to a single cart (0 for unlimited).',
      ),
      'limit_max_times_applied' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Whether or not to further limit the maximum times applied to the number of qualifying products.',
      ),
      'can_be_combined_with_other_discounts' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Whether or not this discount will be applied if other discounts are.',
      ),
      'add_to_cart' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => FALSE,
        'default' => 0,
        'description' => 'Indicates whether free items are added to cart by the module.',
      ),
      'max_uses' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Number of times this discount can be applied (0 for no limit).',
      ),
      'max_uses_per_user' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
        'description' => 'Number of times this discount can be applied to a particular user (0 for unlimited).',
      ),
      'max_uses_per_code' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Number of times this discount can be applied for a particular code (0 for unlimited).',
      ),
      'has_activation' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Whether or not discount has an activation date.',
      ),
      'activates_on' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The activation date and time as a unix timestamp.',
      ),
      'has_expiration' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Whether or not discount has an expiration.',
      ),
      'expiration' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The exipration date and time as a unix timestamp.',
      ),
      'is_active' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => FALSE,
        'default' => 0,
        'description' => 'Convenience flag to state whether code is published on site or not.',
      ),
      'weight' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'insert_timestamp' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The insert date and time as a unix timestamp.',
      ),
    ),
    'primary key' => array('discount_id'),
  );

  $schema['uc_discounts_codes'] = array(
    'fields' => array(
      'discount_code_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'discount_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {uc_discounts}.discount_id of the discount.',
      ),
      'code' => array(
        'type' => 'varchar',
        'length' => 100,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('discount_code_id'),
    'indexes' => array(
      'discount_id' => array('discount_id'),
    ),
  );

  $schema['uc_discounts_products'] = array(
    'fields' => array(
      'discount_product_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'discount_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'The {uc_discounts}.discount_id of the discount.',
      ),
      'product_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'The {uc_products}.nid of the product being discounted.',
      ),
      'grouping' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
        'description' => 'The grouping of this entry since required products be used in discount qualification or application.',
      ),
    ),
    'indexes' => array(
      'discount_id_grouping' => array('discount_id', 'grouping'),
    ),
    'primary key' => array('discount_product_id'),
  );

  $schema['uc_discounts_terms'] = array(
    'fields' => array(
      'discount_term_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'discount_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'The {uc_discounts}.discount_id of the discount.',
      ),
      'term_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'The {term}.tid of the term being discounted.',
      ),
      'grouping' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
        'description' => 'The grouping of this entry since required products be used in discount qualification or application.',
      ),
    ),
    'indexes' => array(
      'discount_id_grouping' => array('discount_id', 'grouping'),
    ),
    'primary key' => array('discount_term_id'),
  );

  $schema['uc_discounts_skus'] = array(
    'fields' => array(
      'discount_sku_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'discount_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'The {uc_discounts}.discount_id of the discount.',
      ),
      'sku' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'The {uc_products}.model of the product being discounted.',
      ),
      'grouping' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
        'description' => 'The grouping of this entry since required products be used in discount qualification or application.',
      ),
    ),
    'indexes' => array(
      'discount_id_grouping' => array('discount_id', 'grouping'),
    ),
    'primary key' => array('discount_sku_id'),
  );

  $schema['uc_discounts_classes'] = array(
    'fields' => array(
      'discount_class_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'discount_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'The {uc_discounts}.discount_id of the discount.',
      ),
      'class' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'description' => 'The {node_type}.type of the product being discounted.',
      ),
      'grouping' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
        'description' => 'The grouping of this entry since required products be used in discount qualification or application.',
      ),
    ),
    'indexes' => array(
      'discount_id_grouping' => array('discount_id', 'grouping'),
    ),
    'primary key' => array('discount_class_id'),
  );

  $schema['uc_discounts_authors'] = array(
    'fields' => array(
      'discount_author_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'discount_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'The {uc_discounts}.discount_id of the discount.',
      ),
      'author_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'The {users}.uid of the author being discounted.',
      ),
      'grouping' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
        'description' => 'The grouping of this entry since required products be used in discount qualification or application.',
      ),
    ),
    'indexes' => array(
      'discount_id_grouping' => array('discount_id', 'grouping'),
    ),
    'primary key' => array('discount_author_id'),
  );

  $schema['uc_discounts_roles'] = array(
    'fields' => array(
      'discount_role_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'discount_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'The {uc_discounts}.discount_id of the discount.',
      ),
      'role_id' => array(
        'type' => 'varchar',
        'length' => 64,
        'description' => 'The role_id of the role required.',
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('discount_role_id'),
    'indexes' => array(
      'discount_id' => array('discount_id'),
    ),
  );

  $schema['uc_discounts_uses'] = array(
    'fields' => array(
      'discount_use_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'discount_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {uc_discounts}.discount_id of the discount.',
      ),
      'user_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {users}.uid of the user who used the discount or (0 if anonymous).',
      ),
      'order_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "The {uc_orders}.order_id of the user's order.",
      ),
      'code' => array(
        'type' => 'varchar',
        'length' => 100,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Code used for discount.',
      ),
      'times_applied' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
        'description' => 'Number of times this discount was applied.',
      ),
      'amount' => array(
        'type' => 'float',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Total amount of discount.',
      ),
      'insert_timestamp' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The insert date and time as a unix timestamp.',
      ),
    ),
    'primary key' => array('discount_use_id'),
    'indexes' => array(
      'discount_id' => array('discount_id'),
    ),
  );

  $schema['uc_discounts_order_codes'] = array(
    'fields' => array(
      'order_discount_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'order_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => "The {uc_orders}.order_id of the user's order.",
      ),
      'codes' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Newline delimited codes string for order.',
      ),
    ),
    'primary key' => array('order_discount_id'),
    'indexes' => array(
      'order_id' => array('order_id'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function uc_discounts_install() {
  // Weight must be less than uc_payment's.
  db_update('system')
    ->fields(array(
    'weight' => -10,
  ))
    ->condition('name', 'uc_discounts')
    ->execute();

  // Print out a nice message directing administrators towards the configuration
  // screen.
  backdrop_set_message(st("UC Discounts settings are available under !link", array("!link" => l("Administer > Store administration > Discounts", "admin/store/uc_discounts"))
  ));
  // Dynamically generated variable data was detected on the following lines.
}

/**
 * Implements hook_update_last_removed().
 */
function uc_discounts_update_last_removed() {
  return 7200;
}

/**
 * Convert Ubercart Discounts variables to config settings.
 */
function uc_discounts_update_1000() {
  $config = config('uc_discounts.settings');
  $config->set('uc_discounts_checkout_allow_user_codes',
    update_variable_get('uc_discounts_checkout_allow_user_codes', 1));
  $config->set('uc_discounts_checkout_show_messages',
    update_variable_get('uc_discounts_checkout_show_messages', 1));
  $config->save();
  update_variable_del('uc_discounts_checkout_allow_user_codes');
  update_variable_del('uc_discounts_checkout_show_messages');

  // uc_discounts settings stored in uc_cart
  config_set('uc_cart.settings', 'uc_cap_uc_discounts_enabled',
    update_variable_get('uc_cap_uc_discounts_enabled', 1));
}

/**
 * Convert roles in Ubercart Discounts tables from numeric rids to strings.
 */
function uc_discounts_update_1001() {
  $role_column = array(
    'type' => 'varchar',
    'length' => 64,
    'description' => 'The role_id of the role required.',
    'not null' => TRUE,
    'default' => '',
  );
  db_change_field('uc_discounts_roles', 'role_id', 'role_id', $role_column);
  db_query('
    UPDATE {uc_discounts_roles}
    SET role_id = :role
    WHERE role_id = :rid
    ', array(':rid' => 1, ':role' => BACKDROP_ANONYMOUS_ROLE));
  db_query('
    UPDATE {uc_discounts_roles}
    SET role_id = :role
    WHERE role_id = :rid
    ', array(':rid' => 2, ':role' => BACKDROP_AUTHENTICATED_ROLE));
}

/**
 * Initialize the new config setting to choose whether to show discounts in the
 * cart contents pane.
 */
function uc_discounts_update_1002() {
  // Past behavior was to show it, so we'll initialize the box to be checked.
  config_set('uc_discounts.settings', 'uc_discounts_checkout_show_in_cart_contents', 1);
}

/**
 * Fix variables improperly converted to strings when updated from D7.
 */
function uc_discounts_update_1003() {
  // Prior to this update, uc_discounts_update_1000() initialized config
  // variables improperly to string values. If those values are still strings,
  // we'll convert them to the correct Boolean values.
  $vars = array(
    'uc_discounts_checkout_allow_user_codes' => 'uc_discounts.settings',
    'uc_discounts_checkout_show_messages' => 'uc_discounts.settings',
    'uc_cap_uc_discounts_enabled' => 'uc_cart.settings',
  );
  foreach ($vars as $var => $config_file) {
    $value = config_get($config_file, $var);
    if ($value === 'TRUE') {
      config_set($config_file, $var, 1);
    }
    elseif ($value === 'FALSE') {
      config_set($config_file, $var, 0);
    }
  }

  // If 'uc_cap_uc_discounts_enabled' is still in the config file, remove it, because it should have been stored in uc_cart.settings.
  if (!is_null(config_get('uc_discounts.settings', 'uc_cap_uc_discounts_enabled'))) {
    config_clear('uc_discounts.settings', 'uc_cap_uc_discounts_enabled');
  }
}

/**
 * Implements hook_uninstall().
 */
function uc_discounts_uninstall() {
  config_clear('uc_cart.settings', 'uc_cap_uc_discounts_enabled');
  config_clear('uc_cart.settings', 'uc_cap_uc_discounts_weight');
}
