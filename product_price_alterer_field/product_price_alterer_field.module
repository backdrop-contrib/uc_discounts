<?php
//$Id$

/**
 * See http://drupal.org/node/106716 for more information.
 */

/**
 * Implementation of hook_field_info().
 */
function product_price_alterer_field_field_info()
{
	return array(
		"discounted_price" => array(
			"label" => t("Discounted Price"),
			"description" => t("Alters price for products where uc_discounts_alt discounts apply when added with a quantity of one or less"),
		),
	);
}

/**
 * Implementation of hook_content_is_empty().
 */
function product_price_alterer_field_content_is_empty($item, $field)
{
	return FALSE;
}

/**
 * Implementation of hook_widget_info().
 */
function product_price_alterer_field_widget_info()
{
	return array(
		"discounted_price" => array(
			"label" => "Default Display",
			"field types" => array("discounted_price"),
			"multiple values" => CONTENT_HANDLE_CORE,
			"callbacks" => array(
				"default value" => CONTENT_CALLBACK_DEFAULT,
			),
		),
	);
}

/**
 * Implementation of hook_widget().
 */
function product_price_alterer_field_widget(&$form, &$form_state, $field, $items, $delta = 0)
{
	$element = array(
		"#type" => $field["widget"]["type"],
		"#default_value" => isset($items[$delta]) ? $items[$delta] : NULL,
	);
	return $element;
}

/**
 * Implementation of hook_field_formatter_info().
 */
function product_price_alterer_field_field_formatter_info()
{
	return array(
		"default" => array(
			"label" => "Discounted Price",
			"field types" => array("discounted_price"),
		),
	);
}

/**
 * Theme function for 'default' text field formatter.
 */
function theme_product_price_alterer_field_formatter_default($element)
{
	return $element["#item"]["discounted_price"];
}

/**
 * Implementation of hook_field()
 */
function product_price_alterer_field_field($op, &$node, $field, &$items, $teaser, $page)
{
	switch ($op)
	{
		case "sanitize":
		case "view":
			//If items is empty, generate value by getting discounts that apply to this product
			if ( empty($items) )
			{
				//Determine discounts that apply to product when ordering a quantity of 1 or less
				$discounts = get_codeless_discounts_for_product_and_quantity($node, 1);
				if ( !empty($discounts) )
				{
					$discounted_price = get_discounted_price($node, $discounts);

					//Add field for discounted price
					$item = array();
					$item["discounted_price"] = theme( "product_dicounted_price", $node, uc_currency_format($discounted_price) );
					$items[] = $item;

					global $product_price_alterer_field_touched;
					if ( empty($product_price_alterer_field_touched) )
					{
						$product_price_alterer_field_touched = TRUE;

						//Add css to page
						drupal_add_css(drupal_get_path("module", "product_price_alterer_field") . "/product_price_alterer_field.css");

						//Add javascript to page
						theme("add_product_price_altering_javascript", $node);
					}
				}
			}
			break;
	}
}

/**
 * Implementation of hook_theme().
 */
function product_price_alterer_field_theme()
{
	return array(
		"product_price_alterer_field_formatter_default" => array(
			"arguments" => array("element" => NULL),
		),
		"product_dicounted_price" => array(
			"arguments" => array("product", "discounted_price"),
		),
		"add_product_price_altering_javascript" => array(
			"arguments" => array("product"),
		),
	);
}

/**
 * Theme function for producing product dicounted price html.
 */
function theme_product_dicounted_price($product, $discounted_price_string)
{
	return $discounted_price_string;
}

/**
 * Theme function for writing javascript to product page.
 */
function theme_add_product_price_altering_javascript($product)
{
	//Alter price using javascript
	drupal_add_js("$(document).ready(function()
		{
			$(\".sell-price:not(.original-sell-price):first\").each(function()
				{
					this_wrapped = $(this);
					this_wrapped.addClass(\"original-sell-price\")
						.after( $(\".field-type-discounted-price:first\") );
				});
		});", "inline");
}

/**
 * Returns discounted price for product (based on passed discounts).
 */
function get_discounted_price($product, $discounts)
{
	//Sum discount amounts
	$total_discount_amount = 0;
	foreach ($discounts as $discount)
		$total_discount_amount += $discount->amount;
	
	return $product->sell_price - $total_discount_amount;
}
